name: Release

on:
  push:
    tags:
      - "*"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Installing dependencies
        if: runner.os == 'Linux'
        working-directory: ./
        run: sudo apt -y install
          build-essential make cmake
          libxrandr-dev libxcursor-dev libudev-dev libopenal-dev libflac-dev
          libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libdrm-dev libgbm-dev
          libfreetype-dev

      - name: Build project
        working-directory: ./
        run: make ${{ runner.os }} -e FORCE_FETCH_CONTENT=1

      - name: Archive build files (Linux and macOS)
        if: runner.os == 'Linux' || runner.os == 'macOS'
        working-directory: ./bin/Release
        run: |
          ARCHIVE_NAME="BattleCity-${{ runner.os }}.tar.gz"
          tar -czvf $ARCHIVE_NAME ./*
          echo "artifact_name=$ARCHIVE_NAME" >> $GITHUB_ENV

      - name: Archive build files (Windows)
        if: runner.os == 'Windows'
        working-directory: ./bin/Release
        run: |
          $ARCHIVE_NAME="BattleCity-${{ runner.os }}.zip"
          Compress-Archive -Path .\* -DestinationPath $ARCHIVE_NAME
          echo "artifact_name=$ARCHIVE_NAME" | Out-File -Append -FilePath $Env:GITHUB_ENV

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.artifact_name }}
          path: ./bin/Release/${{ env.artifact_name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.artifact_name }}
          path: ./artifact

      - name: Set Release Variables
        id: set_vars
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          RELEASE_NAME="${TAG_NAME}"
          echo "tag_name=$TAG_NAME" >> $GITHUB_ENV
          echo "release_name=$RELEASE_NAME" >> $GITHUB_ENV

      - name: Changelog to Release
        id: release
        uses: MatteoCampinoti94/changelog-to-release@v1.0.2
        with:
          version-name: ${{ env.release_name }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.tag_name }}
          release_name: ${{ steps.release.outputs.title }}
          body: ${{ steps.release.outputs.body }}
          draft: false
          prerelease: false

      - name: Upload Linux build to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifact/BattleCity-Linux.tar.gz/BattleCity-Linux.tar.gz
          asset_name: BattleCity-Linux.tar.gz
          asset_content_type: application/gzip

      - name: Upload Windows build to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifact/BattleCity-Windows.zip/BattleCity-Windows.zip
          asset_name: BattleCity-Windows.zip
          asset_content_type: application/zip

      - name: Upload macOS build to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifact/BattleCity-macOS.tar.gz/BattleCity-macOS.tar.gz
          asset_name: BattleCity-macOS.tar.gz
          asset_content_type: application/gzip
