name: Release

on:
  push:
    tags:
      - "*"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Installing dependencies
        if: runner.os == 'Linux'
        working-directory: ./
        run: sudo apt -y install
          build-essential make cmake
          libxrandr-dev libxcursor-dev libudev-dev libopenal-dev libflac-dev
          libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libdrm-dev libgbm-dev
          libfreetype-dev

      - name: Build project
        working-directory: ./
        run: make ${{ runner.os }} -e FORCE_FETCH_CONTENT=1

      - name: Archive build files
        if: runner.os == 'Linux' || runner.os == 'macOS'
        working-directory: ./bin/Release
        run: |
          tar -czvf BattleCity-${{runner.os}}.tar.gz ./*
          echo "::set-output name=artifact_name::$ARCHIVE_NAME"

      - name: Archive build files
        if: runner.os == 'Windows'
        working-directory: ./bin/Release
        run: |
          Compress-Archive -Path .\* -DestinationPath BattleCity-${{runner.os}}.zip
          echo "::set-output name=artifact_name::$ARCHIVE_NAME"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.archive.outputs.artifact_name }}
          path: ${{ runner.os == 'Windows' && 'BattleCity-${runner.os}.zip' || 'BattleCity-${runner.os}.tar.gz' }}

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download build artifact
      uses: actions/download-artifact@v2
      with:
        name: ${{ needs.build.outputs.artifact_name }}
        path: ./artifact

    - name: Set Release Variables
      id: set_vars
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        RELEASE_NAME="${TAG_NAME}"
        if [ -f CHANGELOG.md ]; then
          CHANGELOG=$(cat CHANGELOG.md)
        else
          CHANGELOG="No changelog provided."
        fi
        echo "::set-output name=tag_name::${TAG_NAME}"
        echo "::set-output name=release_name::${RELEASE_NAME}"
        echo "::set-output name=changelog::${CHANGELOG}"
      shell: bash

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.set_vars.outputs.tag_name }}
        release_name: ${{ steps.set_vars.outputs.release_name }}
        body: ${{ steps.set_vars.outputs.changelog }}
        draft: false
        prerelease: false

    - name: Upload Linux build to Release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifact/BattleCity-Linux.tar.gz
        asset_name: BattleCity-Linux.tar.gz
        asset_content_type: application/gzip

    - name: Upload Windows build to Release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifact/BattleCity-Windows.zip
        asset_name: bBattleCity-Windows.zip
        asset_content_type: application/zip

    - name: Upload macOS build to Release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifact/BattleCity-macOS.tar.gz
        asset_name: BattleCity-macOS.tar.gz
        asset_content_type: application/gzip
